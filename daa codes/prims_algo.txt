#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100
#define INF 9999999

int G[MAX_VERTICES][MAX_VERTICES];

void readGraph(int V) {
    printf("Enter the adjacency matrix (0 for no edge, positive weight for edge):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &G[i][j]);
        }
    }
}

int minKey(int key[], bool mstSet[], int V) {
    int min = INF, min_index;
    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void printMST(int parent[], int V) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d \t%d\n", parent[i], i, G[i][parent[i]]);
    }
}

void primMST(int V) {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool mstSet[MAX_VERTICES];

    for (int i = 0; i < V; i++) {
        key[i] = INF;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (G[u][v] && !mstSet[v] && G[u][v] < key[v]) {
                parent[v] = u;
                key[v] = G[u][v];
            }
        }
    }

    printMST(parent, V);
}

int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    readGraph(V);
    primMST(V);

    return 0;
}
