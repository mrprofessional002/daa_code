#include <stdio.h>
#include <limits.h>

int minDistance(int dist[], int visited[], int V) {
    int min = INT_MAX, min_index = -1;
    for (int v = 0; v < V; ++v) {
        if (!visited[v] && dist[v] < min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printPath(int parent[], int target) {
    if (parent[target] == -1)
        return;
    printPath(parent, parent[target]);
    printf(" -> %d", target);
}

void dijkstra(int graph[][100], int V, int source) {
    int dist[V];
    int parent[V];
    int visited[V];

    for (int i = 0; i < V; ++i) {
        dist[i] = INT_MAX;
        parent[i] = -1;
        visited[i] = 0;
    }

    dist[source] = 0;

    for (int count = 0; count < V - 1; ++count) {
        int u = minDistance(dist, visited, V);
        visited[u] = 1;

        for (int v = 0; v < V; ++v) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printf("Shortest paths from source %d:\n", source);
    for (int i = 0; i < V; ++i) {
        printf("Vertex %d: Distance = %d, Path = %d", i, dist[i], source);
        printPath(parent, i);
        printf("\n");
    }
}

int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    int graph[100][100];
    printf("Enter the adjacency matrix (0 for no edge, positive weight for edge):\n");
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            scanf("%d", &graph[i][j]);
        }
    }

    int source;
    printf("Enter the source vertex: ");
    scanf("%d", &source);

    dijkstra(graph, V, source);

    return 0;
}
